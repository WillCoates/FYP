// Code generated by protoc-gen-go. DO NOT EDIT.
// source: scripting.proto

package scripting

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type ScriptDetails struct {
	Id                   string   `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Name                 string   `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Subscriptions        []string `protobuf:"bytes,3,rep,name=subscriptions,proto3" json:"subscriptions,omitempty"`
	LastModified         int64    `protobuf:"varint,4,opt,name=last_modified,json=lastModified,proto3" json:"last_modified,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ScriptDetails) Reset()         { *m = ScriptDetails{} }
func (m *ScriptDetails) String() string { return proto.CompactTextString(m) }
func (*ScriptDetails) ProtoMessage()    {}
func (*ScriptDetails) Descriptor() ([]byte, []int) {
	return fileDescriptor_d96ed1beb6fdceb0, []int{0}
}

func (m *ScriptDetails) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ScriptDetails.Unmarshal(m, b)
}
func (m *ScriptDetails) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ScriptDetails.Marshal(b, m, deterministic)
}
func (m *ScriptDetails) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ScriptDetails.Merge(m, src)
}
func (m *ScriptDetails) XXX_Size() int {
	return xxx_messageInfo_ScriptDetails.Size(m)
}
func (m *ScriptDetails) XXX_DiscardUnknown() {
	xxx_messageInfo_ScriptDetails.DiscardUnknown(m)
}

var xxx_messageInfo_ScriptDetails proto.InternalMessageInfo

func (m *ScriptDetails) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *ScriptDetails) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *ScriptDetails) GetSubscriptions() []string {
	if m != nil {
		return m.Subscriptions
	}
	return nil
}

func (m *ScriptDetails) GetLastModified() int64 {
	if m != nil {
		return m.LastModified
	}
	return 0
}

type Script struct {
	Details              *ScriptDetails `protobuf:"bytes,1,opt,name=details,proto3" json:"details,omitempty"`
	Source               string         `protobuf:"bytes,2,opt,name=source,proto3" json:"source,omitempty"`
	XXX_NoUnkeyedLiteral struct{}       `json:"-"`
	XXX_unrecognized     []byte         `json:"-"`
	XXX_sizecache        int32          `json:"-"`
}

func (m *Script) Reset()         { *m = Script{} }
func (m *Script) String() string { return proto.CompactTextString(m) }
func (*Script) ProtoMessage()    {}
func (*Script) Descriptor() ([]byte, []int) {
	return fileDescriptor_d96ed1beb6fdceb0, []int{1}
}

func (m *Script) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Script.Unmarshal(m, b)
}
func (m *Script) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Script.Marshal(b, m, deterministic)
}
func (m *Script) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Script.Merge(m, src)
}
func (m *Script) XXX_Size() int {
	return xxx_messageInfo_Script.Size(m)
}
func (m *Script) XXX_DiscardUnknown() {
	xxx_messageInfo_Script.DiscardUnknown(m)
}

var xxx_messageInfo_Script proto.InternalMessageInfo

func (m *Script) GetDetails() *ScriptDetails {
	if m != nil {
		return m.Details
	}
	return nil
}

func (m *Script) GetSource() string {
	if m != nil {
		return m.Source
	}
	return ""
}

type ScriptError struct {
	Script               *ScriptDetails `protobuf:"bytes,1,opt,name=script,proto3" json:"script,omitempty"`
	Message              string         `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	XXX_NoUnkeyedLiteral struct{}       `json:"-"`
	XXX_unrecognized     []byte         `json:"-"`
	XXX_sizecache        int32          `json:"-"`
}

func (m *ScriptError) Reset()         { *m = ScriptError{} }
func (m *ScriptError) String() string { return proto.CompactTextString(m) }
func (*ScriptError) ProtoMessage()    {}
func (*ScriptError) Descriptor() ([]byte, []int) {
	return fileDescriptor_d96ed1beb6fdceb0, []int{2}
}

func (m *ScriptError) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ScriptError.Unmarshal(m, b)
}
func (m *ScriptError) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ScriptError.Marshal(b, m, deterministic)
}
func (m *ScriptError) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ScriptError.Merge(m, src)
}
func (m *ScriptError) XXX_Size() int {
	return xxx_messageInfo_ScriptError.Size(m)
}
func (m *ScriptError) XXX_DiscardUnknown() {
	xxx_messageInfo_ScriptError.DiscardUnknown(m)
}

var xxx_messageInfo_ScriptError proto.InternalMessageInfo

func (m *ScriptError) GetScript() *ScriptDetails {
	if m != nil {
		return m.Script
	}
	return nil
}

func (m *ScriptError) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

type GetScriptsRequest struct {
	Name                 string   `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GetScriptsRequest) Reset()         { *m = GetScriptsRequest{} }
func (m *GetScriptsRequest) String() string { return proto.CompactTextString(m) }
func (*GetScriptsRequest) ProtoMessage()    {}
func (*GetScriptsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_d96ed1beb6fdceb0, []int{3}
}

func (m *GetScriptsRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GetScriptsRequest.Unmarshal(m, b)
}
func (m *GetScriptsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GetScriptsRequest.Marshal(b, m, deterministic)
}
func (m *GetScriptsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetScriptsRequest.Merge(m, src)
}
func (m *GetScriptsRequest) XXX_Size() int {
	return xxx_messageInfo_GetScriptsRequest.Size(m)
}
func (m *GetScriptsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetScriptsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetScriptsRequest proto.InternalMessageInfo

func (m *GetScriptsRequest) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

type GetScriptRequest struct {
	Id                   string   `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GetScriptRequest) Reset()         { *m = GetScriptRequest{} }
func (m *GetScriptRequest) String() string { return proto.CompactTextString(m) }
func (*GetScriptRequest) ProtoMessage()    {}
func (*GetScriptRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_d96ed1beb6fdceb0, []int{4}
}

func (m *GetScriptRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GetScriptRequest.Unmarshal(m, b)
}
func (m *GetScriptRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GetScriptRequest.Marshal(b, m, deterministic)
}
func (m *GetScriptRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetScriptRequest.Merge(m, src)
}
func (m *GetScriptRequest) XXX_Size() int {
	return xxx_messageInfo_GetScriptRequest.Size(m)
}
func (m *GetScriptRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetScriptRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetScriptRequest proto.InternalMessageInfo

func (m *GetScriptRequest) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

type GetScriptErrorsRequest struct {
	Id                   []string `protobuf:"bytes,1,rep,name=id,proto3" json:"id,omitempty"`
	Since                int64    `protobuf:"varint,2,opt,name=since,proto3" json:"since,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GetScriptErrorsRequest) Reset()         { *m = GetScriptErrorsRequest{} }
func (m *GetScriptErrorsRequest) String() string { return proto.CompactTextString(m) }
func (*GetScriptErrorsRequest) ProtoMessage()    {}
func (*GetScriptErrorsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_d96ed1beb6fdceb0, []int{5}
}

func (m *GetScriptErrorsRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GetScriptErrorsRequest.Unmarshal(m, b)
}
func (m *GetScriptErrorsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GetScriptErrorsRequest.Marshal(b, m, deterministic)
}
func (m *GetScriptErrorsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetScriptErrorsRequest.Merge(m, src)
}
func (m *GetScriptErrorsRequest) XXX_Size() int {
	return xxx_messageInfo_GetScriptErrorsRequest.Size(m)
}
func (m *GetScriptErrorsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetScriptErrorsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetScriptErrorsRequest proto.InternalMessageInfo

func (m *GetScriptErrorsRequest) GetId() []string {
	if m != nil {
		return m.Id
	}
	return nil
}

func (m *GetScriptErrorsRequest) GetSince() int64 {
	if m != nil {
		return m.Since
	}
	return 0
}

func init() {
	proto.RegisterType((*ScriptDetails)(nil), "ScriptDetails")
	proto.RegisterType((*Script)(nil), "Script")
	proto.RegisterType((*ScriptError)(nil), "ScriptError")
	proto.RegisterType((*GetScriptsRequest)(nil), "GetScriptsRequest")
	proto.RegisterType((*GetScriptRequest)(nil), "GetScriptRequest")
	proto.RegisterType((*GetScriptErrorsRequest)(nil), "GetScriptErrorsRequest")
}

func init() { proto.RegisterFile("scripting.proto", fileDescriptor_d96ed1beb6fdceb0) }

var fileDescriptor_d96ed1beb6fdceb0 = []byte{
	// 342 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x74, 0x52, 0x4f, 0x4b, 0xfb, 0x40,
	0x10, 0x65, 0x9b, 0xfe, 0x52, 0x32, 0xfd, 0x3f, 0xfc, 0xa8, 0xa1, 0x20, 0x84, 0x55, 0x6c, 0x4e,
	0xa1, 0xd4, 0x9b, 0x07, 0x41, 0x50, 0x04, 0x41, 0x84, 0x14, 0xcf, 0x92, 0x76, 0xd7, 0xb2, 0xd0,
	0x26, 0x75, 0x77, 0xeb, 0xd1, 0x4f, 0xec, 0x87, 0x10, 0xb3, 0xbb, 0xa9, 0x8d, 0xf6, 0x96, 0xf7,
	0xe6, 0xcd, 0xcc, 0x9b, 0x97, 0x85, 0xbe, 0x5a, 0x4a, 0xb1, 0xd5, 0x22, 0x5f, 0x25, 0x5b, 0x59,
	0xe8, 0x82, 0x7e, 0x40, 0x77, 0x5e, 0x52, 0xb7, 0x5c, 0x67, 0x62, 0xad, 0xb0, 0x07, 0x0d, 0xc1,
	0x42, 0x12, 0x91, 0x38, 0x48, 0x1b, 0x82, 0x21, 0x42, 0x33, 0xcf, 0x36, 0x3c, 0x6c, 0x94, 0x4c,
	0xf9, 0x8d, 0xe7, 0xd0, 0x55, 0xbb, 0x85, 0x1d, 0x55, 0xe4, 0x2a, 0xf4, 0x22, 0x2f, 0x0e, 0xd2,
	0x43, 0x12, 0xcf, 0xa0, 0xbb, 0xce, 0x94, 0x7e, 0xd9, 0x14, 0x4c, 0xbc, 0x0a, 0xce, 0xc2, 0x66,
	0x44, 0x62, 0x2f, 0xed, 0x7c, 0x93, 0x8f, 0x96, 0xa3, 0x0f, 0xe0, 0x9b, 0xfd, 0x18, 0x43, 0x8b,
	0x19, 0x0f, 0xe5, 0xf6, 0xf6, 0xac, 0x97, 0x1c, 0x38, 0x4b, 0x5d, 0x19, 0x47, 0xe0, 0xab, 0x62,
	0x27, 0x97, 0xce, 0x94, 0x45, 0xf4, 0x09, 0xda, 0xa6, 0xe3, 0x4e, 0xca, 0x42, 0xe2, 0x05, 0xf8,
	0xc6, 0xcd, 0x91, 0x79, 0xb6, 0x8a, 0x21, 0xb4, 0x36, 0x5c, 0xa9, 0x6c, 0xe5, 0xe6, 0x39, 0x48,
	0x27, 0x30, 0xbc, 0xe7, 0xda, 0x74, 0xa9, 0x94, 0xbf, 0xed, 0xb8, 0xd2, 0x55, 0x20, 0x64, 0x1f,
	0x08, 0xa5, 0x30, 0xa8, 0x84, 0x4e, 0x57, 0x0b, 0x92, 0x5e, 0xc3, 0xa8, 0xd2, 0x94, 0x06, 0x55,
	0x5d, 0xe9, 0xd9, 0xc8, 0xff, 0xc3, 0x3f, 0x25, 0x72, 0x7b, 0x9e, 0x97, 0x1a, 0x30, 0xfb, 0x24,
	0x30, 0x98, 0xbb, 0xbf, 0x37, 0xe7, 0xf2, 0x5d, 0x2c, 0x39, 0xce, 0x00, 0xf6, 0x0e, 0x11, 0x93,
	0x5f, 0x76, 0xc7, 0xb5, 0xab, 0xa7, 0x04, 0x27, 0x10, 0x54, 0x32, 0x1c, 0x26, 0x75, 0xe3, 0xe3,
	0x96, 0xed, 0xc0, 0x53, 0x08, 0x6e, 0x18, 0xb3, 0xc0, 0xb1, 0xfb, 0x72, 0x04, 0x9d, 0xe7, 0x2d,
	0xcb, 0x34, 0x3f, 0xaa, 0xb8, 0x82, 0x7e, 0xed, 0x64, 0x3c, 0x49, 0xfe, 0x0e, 0x61, 0xdc, 0x49,
	0x7e, 0xb0, 0x53, 0xb2, 0xf0, 0xcb, 0xf7, 0x79, 0xf9, 0x15, 0x00, 0x00, 0xff, 0xff, 0xe2, 0xa8,
	0xa0, 0xef, 0xb2, 0x02, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// ScriptingServiceClient is the client API for ScriptingService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type ScriptingServiceClient interface {
	GetScripts(ctx context.Context, in *GetScriptsRequest, opts ...grpc.CallOption) (ScriptingService_GetScriptsClient, error)
	GetScript(ctx context.Context, in *GetScriptRequest, opts ...grpc.CallOption) (*Script, error)
	AddScript(ctx context.Context, in *Script, opts ...grpc.CallOption) (*Script, error)
	UpdateScript(ctx context.Context, in *Script, opts ...grpc.CallOption) (*Script, error)
	GetScriptErrors(ctx context.Context, in *GetScriptErrorsRequest, opts ...grpc.CallOption) (ScriptingService_GetScriptErrorsClient, error)
}

type scriptingServiceClient struct {
	cc *grpc.ClientConn
}

func NewScriptingServiceClient(cc *grpc.ClientConn) ScriptingServiceClient {
	return &scriptingServiceClient{cc}
}

func (c *scriptingServiceClient) GetScripts(ctx context.Context, in *GetScriptsRequest, opts ...grpc.CallOption) (ScriptingService_GetScriptsClient, error) {
	stream, err := c.cc.NewStream(ctx, &_ScriptingService_serviceDesc.Streams[0], "/ScriptingService/GetScripts", opts...)
	if err != nil {
		return nil, err
	}
	x := &scriptingServiceGetScriptsClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type ScriptingService_GetScriptsClient interface {
	Recv() (*ScriptDetails, error)
	grpc.ClientStream
}

type scriptingServiceGetScriptsClient struct {
	grpc.ClientStream
}

func (x *scriptingServiceGetScriptsClient) Recv() (*ScriptDetails, error) {
	m := new(ScriptDetails)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *scriptingServiceClient) GetScript(ctx context.Context, in *GetScriptRequest, opts ...grpc.CallOption) (*Script, error) {
	out := new(Script)
	err := c.cc.Invoke(ctx, "/ScriptingService/GetScript", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *scriptingServiceClient) AddScript(ctx context.Context, in *Script, opts ...grpc.CallOption) (*Script, error) {
	out := new(Script)
	err := c.cc.Invoke(ctx, "/ScriptingService/AddScript", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *scriptingServiceClient) UpdateScript(ctx context.Context, in *Script, opts ...grpc.CallOption) (*Script, error) {
	out := new(Script)
	err := c.cc.Invoke(ctx, "/ScriptingService/UpdateScript", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *scriptingServiceClient) GetScriptErrors(ctx context.Context, in *GetScriptErrorsRequest, opts ...grpc.CallOption) (ScriptingService_GetScriptErrorsClient, error) {
	stream, err := c.cc.NewStream(ctx, &_ScriptingService_serviceDesc.Streams[1], "/ScriptingService/GetScriptErrors", opts...)
	if err != nil {
		return nil, err
	}
	x := &scriptingServiceGetScriptErrorsClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type ScriptingService_GetScriptErrorsClient interface {
	Recv() (*ScriptError, error)
	grpc.ClientStream
}

type scriptingServiceGetScriptErrorsClient struct {
	grpc.ClientStream
}

func (x *scriptingServiceGetScriptErrorsClient) Recv() (*ScriptError, error) {
	m := new(ScriptError)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// ScriptingServiceServer is the server API for ScriptingService service.
type ScriptingServiceServer interface {
	GetScripts(*GetScriptsRequest, ScriptingService_GetScriptsServer) error
	GetScript(context.Context, *GetScriptRequest) (*Script, error)
	AddScript(context.Context, *Script) (*Script, error)
	UpdateScript(context.Context, *Script) (*Script, error)
	GetScriptErrors(*GetScriptErrorsRequest, ScriptingService_GetScriptErrorsServer) error
}

// UnimplementedScriptingServiceServer can be embedded to have forward compatible implementations.
type UnimplementedScriptingServiceServer struct {
}

func (*UnimplementedScriptingServiceServer) GetScripts(req *GetScriptsRequest, srv ScriptingService_GetScriptsServer) error {
	return status.Errorf(codes.Unimplemented, "method GetScripts not implemented")
}
func (*UnimplementedScriptingServiceServer) GetScript(ctx context.Context, req *GetScriptRequest) (*Script, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetScript not implemented")
}
func (*UnimplementedScriptingServiceServer) AddScript(ctx context.Context, req *Script) (*Script, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddScript not implemented")
}
func (*UnimplementedScriptingServiceServer) UpdateScript(ctx context.Context, req *Script) (*Script, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateScript not implemented")
}
func (*UnimplementedScriptingServiceServer) GetScriptErrors(req *GetScriptErrorsRequest, srv ScriptingService_GetScriptErrorsServer) error {
	return status.Errorf(codes.Unimplemented, "method GetScriptErrors not implemented")
}

func RegisterScriptingServiceServer(s *grpc.Server, srv ScriptingServiceServer) {
	s.RegisterService(&_ScriptingService_serviceDesc, srv)
}

func _ScriptingService_GetScripts_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(GetScriptsRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ScriptingServiceServer).GetScripts(m, &scriptingServiceGetScriptsServer{stream})
}

type ScriptingService_GetScriptsServer interface {
	Send(*ScriptDetails) error
	grpc.ServerStream
}

type scriptingServiceGetScriptsServer struct {
	grpc.ServerStream
}

func (x *scriptingServiceGetScriptsServer) Send(m *ScriptDetails) error {
	return x.ServerStream.SendMsg(m)
}

func _ScriptingService_GetScript_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetScriptRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ScriptingServiceServer).GetScript(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ScriptingService/GetScript",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ScriptingServiceServer).GetScript(ctx, req.(*GetScriptRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ScriptingService_AddScript_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Script)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ScriptingServiceServer).AddScript(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ScriptingService/AddScript",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ScriptingServiceServer).AddScript(ctx, req.(*Script))
	}
	return interceptor(ctx, in, info, handler)
}

func _ScriptingService_UpdateScript_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Script)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ScriptingServiceServer).UpdateScript(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ScriptingService/UpdateScript",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ScriptingServiceServer).UpdateScript(ctx, req.(*Script))
	}
	return interceptor(ctx, in, info, handler)
}

func _ScriptingService_GetScriptErrors_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(GetScriptErrorsRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ScriptingServiceServer).GetScriptErrors(m, &scriptingServiceGetScriptErrorsServer{stream})
}

type ScriptingService_GetScriptErrorsServer interface {
	Send(*ScriptError) error
	grpc.ServerStream
}

type scriptingServiceGetScriptErrorsServer struct {
	grpc.ServerStream
}

func (x *scriptingServiceGetScriptErrorsServer) Send(m *ScriptError) error {
	return x.ServerStream.SendMsg(m)
}

var _ScriptingService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "ScriptingService",
	HandlerType: (*ScriptingServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetScript",
			Handler:    _ScriptingService_GetScript_Handler,
		},
		{
			MethodName: "AddScript",
			Handler:    _ScriptingService_AddScript_Handler,
		},
		{
			MethodName: "UpdateScript",
			Handler:    _ScriptingService_UpdateScript_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "GetScripts",
			Handler:       _ScriptingService_GetScripts_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "GetScriptErrors",
			Handler:       _ScriptingService_GetScriptErrors_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "scripting.proto",
}
